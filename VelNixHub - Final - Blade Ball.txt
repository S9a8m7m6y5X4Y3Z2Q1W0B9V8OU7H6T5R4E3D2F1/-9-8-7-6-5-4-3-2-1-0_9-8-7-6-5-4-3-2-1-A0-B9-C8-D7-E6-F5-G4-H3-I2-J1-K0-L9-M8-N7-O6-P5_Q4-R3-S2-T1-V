local nurysium_module = {}
function nurysium_module.isAlive(Entity)
    if not Entity.Character then
        return false
    end

    local aliveFolder = workspace:FindFirstChild("Alive")
    if aliveFolder then
        local aliveEntity = aliveFolder:FindFirstChild(Entity.Name)
        return aliveEntity and aliveEntity:FindFirstChild("Humanoid") and aliveEntity.Humanoid.Health > 0
    end

    return false
end

function nurysium_module.getBall()
    local ballsFolder = workspace:WaitForChild("Balls")
    if not ballsFolder then
        return nil
    end

    for _, ball in ipairs(ballsFolder:GetChildren()) do
        if ball:IsA("BasePart") and ball:GetAttribute("realBall") then
            return ball
        end
    end

    return nil
end

local getTrainingBall = function()
    local trainingBallsFolder = workspace:WaitForChild("TrainingBalls")
    for _, ball in ipairs(trainingBallsFolder:GetChildren()) do
        if ball:IsA("BasePart") and ball:GetAttribute("realBall") then
            return ball
        end
    end
end

local Nurysium_Util = {
    getBall = function()
        return nurysium_module.getBall()
    end,
    getTrainingBall = function()
        return getTrainingBall()
    end
}

local Stats = game:GetService("Stats")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local AdService = game:GetService("AdService")
local SocialService = game:GetService("SocialService")

local local_player = Players.LocalPlayer
local camera = workspace.CurrentCamera

local originalParryRemote
local originalResolveParryRemote 

local nurysium_Data = nil
local hit_Sound = nil
local closest_Entity = nil

local aura_Enabled = false
local auto_curve = false
local auto_spam = false
local anti_curve_spam_Enabled = false
local visualize_Enabled = false
local night_mode_Enabled = false
local spectate_Enabled = false
local target_closest_player = true

local Services = {game:GetService("AdService"),game:GetService("SocialService")}

function SwordCrateManual()
	game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer("PromptPurchaseCrate",workspace.Spawn.Crates.NormalSwordCrate)
end

function ExplosionCrateManual()
	game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer("PromptPurchaseCrate",workspace.Spawn.Crates.NormalExplosionCrate)
end

function SwordCrateAuto()
	while _G.AutoSword do
		game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer("PromptPurchaseCrate",workspace.Spawn.Crates.NormalSwordCrate)
		task.wait(1)
	end
end

function ExplosionCrateAuto()
	while _G.AutoBoom do
		game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer("PromptPurchaseCrate",workspace.Spawn.Crates.NormalExplosionCrate)
		task.wait(1)
	end
end

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua", true))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua", true))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua", true))()

Fluent:Notify({
    Title = [[ [ VelNix Hub - Loaded! ]
 VelNix V2.0.0: Public Loaded.]],
    Content = [[Feel Free to Showcase.]],
    Duration = 5,
    Type = "Info"
})

local executorName = "Unknown Executor - If You See This Your Executor is Gay"
if identifyexecutor then
    executorName = identifyexecutor()
end

local Window = Fluent:CreateWindow({
    Title = "VelNix Hub - V2.0.0",
    SubTitle = "By [Orealated] - " .. executorName,
    TabWidth = 180,
    Size = UDim2.fromOffset(500, 250),
    Acrylic = false,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when there's no MinimizeKeybind
})

local Tabs = {
	Main = Window:AddTab({ Title = "Main", Icon = "shield" }),
	Tools = Window:AddTab({ Title = "Utilities", Icon = "wrench" }),
	Misc = Window:AddTab({ Title = "Miscellaneous", Icon = "component" }),
	Loggs = Window:AddTab({ Title = "Changelogs", Icon = "bell-plus" }),
	EnikoS = Window:AddTab({ Title = "Credits", Icon = "crown" }),
}

local Options = Fluent.Options
function initializate(dataFolder_name)
	nurysium_Data = Instance.new("Folder", game:GetService("CoreGui"))
	nurysium_Data.Name = dataFolder_name
	hit_Sound = Instance.new("Sound", nurysium_Data)
	hit_Sound.SoundId = "rbxassetid://8632670510"
	hit_Sound.Volume = 5
end

local function get_closest_entity(Object)
	task.spawn(function()
		local closest
		local max_distance = math.huge
		for index, entity in workspace.Alive:GetChildren() do
			if entity.Name ~= Players.LocalPlayer.Name then
				local distance = (Object.Position - entity.HumanoidRootPart.Position).Magnitude
				if distance < max_distance then
					closest_Entity = entity
					max_distance = distance
				end
			end
		end
		return closest_Entity
	end)
end

function resolve_parry_Remote()
	for _, service in ipairs(Services) do
		local temp_remote = service:FindFirstChildOfClass("RemoteEvent")
		if temp_remote and temp_remote.Name:find("\n") then
			originalParryRemote = temp_remote
			break
		end
	end
end

resolve_parry_Remote()

local aura_table = {
	canParry = true,
	is_Spamming = false,
	parry_Range = 0,
	spam_Range = 0,  
	hit_Count = 0,
	hit_Time = tick(),
	ball_Warping = tick(),
	is_ball_Warping = false,
	last_target = nil,
}

local workspace_Balls = workspace:WaitForChild("Balls")
local remotes_ParrySuccessAll = ReplicatedStorage.Remotes:WaitForChild("ParrySuccessAll")

local function resetAuraTable()
    aura_table.hit_Count = 0
    aura_table.is_ball_Warping = false
    aura_table.is_Spamming = false
    aura_table.can_parry = true
    aura_table.last_target = nil
end

workspace_Balls.ChildRemoved:Connect(resetAuraTable)
remotes_ParrySuccessAll.OnClientEvent:Connect(function()
    aura_table.hit_Count = math.max(0, aura_table.hit_Count + 1)
    task.delay(0.185, function()
        aura_table.hit_Count = math.max(0, aura_table.hit_Count - 1)
    end)
end)

task.spawn(function()
    local heartbeatConnection = RunService.Heartbeat:Connect(function()
        if not auto_spam then
            auto_spam = false
            pcall(function()
                heartbeatConnection:Disconnect()
            end)
        end
    end)
end)

local Mainy = Tabs.Main:AddSection("VelNix - Main")
Mainy:AddParagraph({
    Title = "[ VelNix: Main Tab ]",
    Content = [[ A Tab Where Most of The Core Features Lay Here.]]
})
local Toggle = Mainy:AddToggle("PingBasedParry", {Title = "Auto Parry And Auto Spam", Description = [[Works With High Amount of Ping Like 200-300. Vulnerable to Aerodynamic Slash. No Area Training Support as it Can Ruin Ap.]], Default = true })
Toggle:OnChanged(function(toggled)
    aura_Enabled = toggled
    auto_spam = toggled
end)
local Toggle = Mainy:AddToggle("AutoCurve", {Title = "Auto Curve", Description = "Curves The Ball Automatically, Which Can Confuse Opponents.", Default = false })
Toggle:OnChanged(function(toggled)
	auto_curve = Options.AutoCurve.Value
end)
local Toggle = Mainy:AddToggle("ToggleManualSpam", {
    Title = "Manual Spam GUI",
    Description = "Toggles Manual Spamming GUI.",
    Default = false
})

local ManualUI = false
local AutoSpamButSpammierjdndnsjzjs

Toggle:OnChanged(function(toggled)
    ManualUI = toggled

    if ManualUI then
        function ManualSpam()
            AutoSpamButSpammierjdndnsjzjs = Instance.new("ScreenGui")
            local Main = Instance.new("Frame")
            local UICorner = Instance.new("UICorner")
            local UIStroke = Instance.new("UIStroke")
            local TitleLabel = Instance.new("TextLabel")
            local IndercanotTextBlah = Instance.new("TextButton")
            local ContextLabel = Instance.new("TextLabel")

            AutoSpamButSpammierjdndnsjzjs.Name = "AutoSpamButSpammierjdndnsjzjs"
            AutoSpamButSpammierjdndnsjzjs.Parent = game.CoreGui
            AutoSpamButSpammierjdndnsjzjs.ResetOnSpawn = false

            Main.Name = "Main"
            Main.Parent = AutoSpamButSpammierjdndnsjzjs
            Main.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            Main.BorderSizePixel = 0
            Main.Position = UDim2.new(0.5, 0, 0.5, 0)
            Main.Size = UDim2.new(0.3, 0, 0.25, 0)
            Main.AnchorPoint = Vector2.new(0.5, 0.5)

            UICorner.CornerRadius = UDim.new(0.1, 0)
            UICorner.Parent = Main

            UIStroke.Color = Color3.fromRGB(255, 255, 255)
            UIStroke.Thickness = 2
            UIStroke.Parent = Main

            TitleLabel.Name = "TitleLabel"
            TitleLabel.Parent = Main
            TitleLabel.BackgroundTransparency = 1
            TitleLabel.Position = UDim2.new(0, 0, 0.05, 0)
            TitleLabel.Size = UDim2.new(1, 0, 0.2, 0)
            TitleLabel.Font = Enum.Font.SourceSansBold
            TitleLabel.Text = "Manual Spam Control"
            TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            TitleLabel.TextSize = 24

            IndercanotTextBlah.Name = "IndercanotTextBlah"
            IndercanotTextBlah.Parent = Main
            IndercanotTextBlah.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
            IndercanotTextBlah.BorderSizePixel = 0
            IndercanotTextBlah.Size = UDim2.new(0.8, 0, 0.4, 0)
            IndercanotTextBlah.Position = UDim2.new(0.1, 0, 0.3, 0)
            IndercanotTextBlah.Font = Enum.Font.SourceSansBold
            IndercanotTextBlah.Text = "OFF"
            IndercanotTextBlah.TextColor3 = Color3.fromRGB(255, 255, 255)
            IndercanotTextBlah.TextSize = 22
            
            local buttonCorner = UICorner:Clone()
            buttonCorner.CornerRadius = UDim.new(0.2, 0)
            buttonCorner.Parent = IndercanotTextBlah

            ContextLabel.Name = "ContextLabel"
            ContextLabel.Parent = Main
            ContextLabel.BackgroundTransparency = 1
            ContextLabel.Position = UDim2.new(0, 0, 0.8, 0)
            ContextLabel.Size = UDim2.new(1, 0, 0.2, 0)
            ContextLabel.Font = Enum.Font.SourceSans
            ContextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
            ContextLabel.TextSize = 16
            ContextLabel.Text = "Click The Button to Toggle Spam Mode"

            local dragEnabled = false
            local dragInput = nil
            local dragStart = nil
            local startPos = Main.Position

            Main.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragEnabled = true
                    dragStart = input.Position
                    startPos = Main.Position
                    input.Changed:Connect(function()
                        if input.UserInputState == Enum.UserInputState.End then
                            dragEnabled = false
                        end
                    end)
                end
            end)

            Main.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                    dragInput = input.Position
                end
            end)

            RunService.Heartbeat:Connect(function()
                if dragEnabled and dragInput and dragStart then
                    local delta = dragInput - dragStart
                    Main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
                end
            end)

            local userInputService = game:GetService("UserInputService")
            local runService = game:GetService("RunService")
            local is_Green = false
            local originalParryRemote = nil

            local Services = {game:GetService("AdService"), game:GetService("SocialService")}

            function resolve_parry_Remote()
                for _, value in ipairs(Services) do
                    local temp_remote = value:FindFirstChildOfClass("RemoteEvent")
                    if temp_remote and temp_remote.Name:find("\n") then
                        originalParryRemote = temp_remote
                        break
                    end
                end
            end

            resolve_parry_Remote()

            local camera = workspace.CurrentCamera
            local mouse = game.Players.LocalPlayer:GetMouse()

            local function getClosestEntity()
                local closest_Entity = nil
                local shortestDistance = math.huge

                for _, entity in pairs(workspace.Alive:GetChildren()) do
                    if entity.Name ~= Players.LocalPlayer.Name then
                        local distance = (entity.HumanoidRootPart.Position - camera.CFrame.Position).Magnitude
                        if distance < shortestDistance then
                            closest_Entity = entity
                            shortestDistance = distance
                        end
                    end
                end

                return closest_Entity
            end

            local function toggleColor()
                is_Green = not is_Green
                if is_Green then
                    IndercanotTextBlah.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
                    IndercanotTextBlah.Text = "ON"
                    aura_Enabled = false
                    auto_spam = false
                else
                    IndercanotTextBlah.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
                    IndercanotTextBlah.Text = "OFF"
                    aura_Enabled = true
                    auto_spam = true
                end
            end

            IndercanotTextBlah.MouseButton1Click:Connect(toggleColor)

            runService.RenderStepped:Connect(function()
                if is_Green and originalParryRemote then
                    task.spawn(function()
                        local closest_Entity = getClosestEntity()
                        if closest_Entity then
                            local cf = camera.CFrame
                            local x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22 = cf:GetComponents()

                            originalParryRemote:FireServer(
                                0,
                                CFrame.new(x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22),
                                {[closest_Entity.Name] = closest_Entity.HumanoidRootPart.Position},
                                {closest_Entity.HumanoidRootPart.Position.X, closest_Entity.HumanoidRootPart.Position.Y},
                                false
                            )
                        end
                    end)
                end
            end)
        end

        ManualSpam()
    else
        if AutoSpamButSpammierjdndnsjzjs then
            AutoSpamButSpammierjdndnsjzjs:Destroy()
            AutoSpamButSpammierjdndnsjzjs = nil
        end
    end
end)
local Toggle = Mainy:AddToggle("TpBall", {Title = "Teleport to Ball", Description = "Teleports You to The Ball When It's Targeting You. Defualt Interval of 4 Second's.", Default = false })
Toggle:OnChanged(function(toggled)
    tp_hit = Options.TpBall.Value
end)
local Toggle = Mainy:AddToggle("OrbitalDisaster", {Title = "Orbit Ball", Description = "Lets You Orbit The Ball. Defualt Speed of 4", Default = false })
Toggle:OnChanged(function(toggled)
    auto_win = Options.OrbitalDisaster.Value
end)
local Others = Tabs.Main:AddSection("Other Features")
local Toggle = Others:AddToggle("Visualize", {Title = "Visualizer", Description = "Visualize The Auto Parry.", Default = false })
Toggle:OnChanged(function(toggled)
	visualize_Enabled = Options.Visualize.Value
end)
local Toggle = Others:AddToggle("ToggleAI", {
    Title = "AI", 
    Description = "Enables or Disables AI, Which Can Automatically Make You Move.",
    Default = false
})
Toggle:OnChanged(function(toggled)
    ai_Enabled = toggled
    
    if toggled then
        Fluent:Notify({
            Title = "[ VelNix Hub - Information ]",
            Content = "Turn Off Shiftlock For The Full Experience of AI.",
            Duration = 5,
            Type = "Info"
        })
    end
end)

local function getPingStatus(ping)
    if ping <= 45 then
        return "Excellent Ping"
    elseif ping <= 95 then
        return "Good Ping"
    elseif ping <= 165 then
        return "Decent Ping"
    elseif ping <= 225 then
        return "Moderate Ping"
    elseif ping <= 300 then
        return "High Ping"
    else
        return "Very High Ping"
    end
end

Others:AddButton({
    Title = "Check Ping",
    Description = "Checks Your Ping.",
    Callback = function()
        local ping = Stats.Network.ServerStatsItem["Data Ping"]:GetValue()
        local pingStatus = getPingStatus(ping)

        Fluent:Notify({
            Title = "[ VelNix Hub - Ping Checker ]",
            Content = "Your Current Ping is: " .. tostring(ping) .. " ms [" .. pingStatus .. "]",
            Duration = 5,
            Type = "Info"
        })
    end
})
local Toggle = Others:AddToggle("AnticurveSpam", {Title = "Anti Curve Spam", Description = "Disables Your Curving, Can Make Parrying Better.", Default = false })
Toggle:OnChanged(function(toggled)
    anti_curve_spam_Enabled = toggled
    local self = Nurysium_Util.getBall()
    if self then
        if anti_curve_spam_Enabled then
            local ballVelocity = self.AssemblyLinearVelocity
            local straightLineVelocity = Vector3.new(ballVelocity.X, ballVelocity.Y, 0)
            self.AssemblyLinearVelocity = straightLineVelocity
        else
            self.AssemblyLinearVelocity = self.AssemblyLinearVelocity
        end
    end
end)
local Money = Tabs.Main:AddSection("Crates Opener")
Money:AddButton({
	Title = "Open Sword Crate",
	Description = "Opens One Sword Crate | Costs [80]",
	Callback = function()
		SwordCrateManual()
	end
})
Money:AddToggle("AutoSwordCrate", {
    Title = "Auto Open Sword Crate",
    Description = "Automatically Opens Sword Crates | Costs [80]",
    Default = false
}):OnChanged(function(toggled)
    autoSwordCrate = toggled
    if autoSwordCrate then
        task.spawn(function()
            while autoSwordCrate do
                SwordCrateManual()
                task.wait(1.2)
            end
        end)
    end
end)
Money:AddButton({
	Title = "Open Explosion Crate",
	Description = "Opens One Explosion Crate | Costs [80]",
	Callback = function()
		ExplosionCrateManual()
	end
})
Money:AddToggle("AutoExplosionCrate", {
    Title = "Auto Open Explosion Crate",
    Description = "Automatically opens Explosion Crates",
    Default = false
}):OnChanged(function(toggled)
    autoExplosionCrate = toggled
    if autoExplosionCrate then
        task.spawn(function()
            while autoExplosionCrate do
                ExplosionCrateManual()
                task.wait(1.2)
            end
        end)
    end
end)
local Tools = Tabs.Tools:AddSection("VelNix - Utilities")
Tools:AddParagraph({
    Title = "[ VelNix Hub: Utilities Tab ]",
    Content = [[ A Tab Where You Can Tweak Some Stuff.]]
})
local Toggle = Tools:AddToggle("ToggleVelNixUI", {
    Title = "Toggle VelNix Hub UI",
    Description = "Toggles the VelNix Hub UI Backpack Toggle on And Off.",
    Default = true
})

local uiToolEnabled = false
Toggle:OnChanged(function(toggled)
    uiToolEnabled = toggled

    if uiToolEnabled then
        local Tool = Instance.new("Tool")
        local Handle = Instance.new("Part")
        local TextLabel = Instance.new("SurfaceGui")
        local Label = Instance.new("TextLabel")

        Tool.Name = "Toggle VelNix Hub UI"
        Tool.RequiresHandle = false

        Label.Parent = TextLabel
        Label.Size = UDim2.new(1, 0, 1, 0)
        Label.BackgroundTransparency = 1
        Label.Text = "Open"
        Label.TextColor3 = Color3.fromRGB(0, 0, 0)
        Label.Font = Enum.Font.SourceSansBold
        Label.TextSize = 18

        Tool.Activated:Connect(function()
            game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.LeftControl, false, game)
        end)

        Tool.Parent = local_player.Backpack

        local_player.CharacterAdded:Connect(function(character)
        Tool.Parent = local_player.Backpack
       end)

       local_player.CharacterRemoving:Connect(function(character)
       Tool.Parent = local_player.Backpack
       end)
else
    for _, item in ipairs(local_player.Backpack:GetChildren()) do
        if item.Name == "Toggle VelNix Hub UI" then
            item:Destroy()
        end
    end
end
end)
local Toggle = Tools:AddToggle("ToggleClickTP", {
    Title = "Toggle Click TP",
    Description = "[Buggy] Toggles The Tool That Allows You to Click to Teleport on And Off.",
    Default = false
})

local clickTPEnabled = false
Toggle:OnChanged(function(toggled)
    clickTPEnabled = toggled

    if clickTPEnabled then
        local tool = Instance.new("Tool")
        tool.RequiresHandle = false
        tool.Name = "Equip to Click TP"

        tool.Activated:Connect(function()
            local mouse = game.Players.LocalPlayer:GetMouse()
            local pos = mouse.Hit + Vector3.new(0, 2.5, 0)
            pos = CFrame.new(pos.X, pos.Y, pos.Z)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = pos
        end)

        tool.Parent = game.Players.LocalPlayer.Backpack

        game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
            tool.Parent = game.Players.LocalPlayer.Backpack
        end)

        game.Players.LocalPlayer.CharacterRemoving:Connect(function(character)
            tool.Parent = game.Players.LocalPlayer.Backpack
        end)
    else
        for _, item in ipairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
            if item.Name == "Equip to Click TP" then
                item:Destroy()
            end
        end
    end
end)
local Customizers = Tabs.Tools:AddSection("VelNix - Customizers/Sliders")
local teleportIntervalSlider = Customizers:AddSlider("Teleport Ball - Interval", {
    Title = "Teleport Ball - Interval",
    Description = "Adjusts The Interval between Teleportations For The Teleport Ball Feature.",
    Default = 4,
    Min = 0,
    Max = 20,
    Rounding = 2,
    Callback = function(value)
        teleportInterval = tonumber(value)
    end
})
local orbitSpeedSlider = Customizers:AddSlider("Orbit Ball - Speed", {
    Title = "Orbit Ball - Speed",
    Description = "Adjusts The Speed of The Orbit Ball Feature.",
    Default = 4,
    Min = 0,
    Max = 10,
    Rounding = 2,
    Callback = function(value)
        orbitSpeed = tonumber(value)
    end
})
local Misc = Tabs.Misc:AddSection("VelNix - Miscellaneous")
Misc:AddParagraph({
    Title = "[ VelNix Hub: Miscellaneous Tab ]",
    Content = [[ A Tab With Some Other Small Features.]]
})
local Toggle = Misc:AddToggle("Nightmode", {Title = "Night Mode", Description = "Sets The Sky to Night Mode.", Default = false })
Toggle:OnChanged(function(toggled)
	night_mode_Enabled = Options.Nightmode.Value
end)
local Toggle = Misc:AddToggle("SpectateBall", {Title = "Spectate Ball", Description = "Manipulate Your Camera to Spectate The Ball.", Default = false })
Toggle:OnChanged(function(toggled)
	spectate_Enabled = Options.SpectateBall.Value
end)
Misc:AddButton({
	Title = "Fps Booster",
	Description = "Use This to Boost Your Fps.",
	Callback = function()
		_G.Settings = {
    Players = {
        ["Ignore Me"] = true, -- Ignore your Character
        ["Ignore Others"] = true -- Ignore other Characters
    },
    Meshes = {
        Destroy = true, -- Destroy Meshes
        LowDetail = true -- Low detail meshes (NOT SURE IT DOES ANYTHING)
    },
    Images = {
        Invisible = true, -- Invisible Images
        LowDetail = true, -- Low detail images (NOT SURE IT DOES ANYTHING)
        Destroy = true, -- Destroy Images
    },
    ["No Particles"] = true, -- Disables all ParticleEmitter, Trail, Smoke, Fire and Sparkles
    ["No Camera Effects"] = true, -- Disables all PostEffect's (Camera/Lighting Effects)
    ["No Explosions"] = true, -- Makes Explosion's invisible
    ["No Clothes"] = true, -- Removes Clothing from the game
    ["Low Water Graphics"] = true, -- Removes Water Quality
    ["No Shadows"] = true, -- Remove Shadows
    ["Low Rendering"] = true, -- Lower Rendering
    ["Low Quality Parts"] = true -- Lower quality parts
}
loadstring(game:HttpGet("https://raw.githubusercontent.com/Orealated/VelNix/main/VelNixHub%20RipsFps%20Modified.txt", true))();
	end
})
local Logs = Tabs.Loggs:AddSection("VelNix - Changelogs")
Logs:AddParagraph({
    Title = "[ VelNix: V1.1.2 ]",
    Content = [[ [#] Fixed Most Bugs Where it Accidentally Parries The Ball Even Tho Your Not The One Being Targeted.
 [%] Improved Auto Spam And Auto Parry.]]
})
Logs:AddParagraph({
    Title = "[ VelNix: V1.2.0 ]",
    Content = [[ [#] Fixed More Bugs Where it Accidentally Parries The Ball Even Tho Your Not The One Being Targeted.
 [%] Improved Long Range Auto Parry.]]
})
Logs:AddParagraph({
    Title = "[ VelNix: V2.0.0 ]",
    Content = [[ [%] Rewritten Both Auto Parry And Auto Spam.
 [+] More Streamlined Ap.
 [+] Better Ball Detection.
 [%] Optimized Most Features
 [#] Fixed Some Memory Leaks.
 [+] Added a 5 New Features: Teleport to Ball, Orbit Ball, Manual Spam, Toggle Click TP And AI.
 [+] Added a New Section Called "Customizers/Sliders." Where You Can Customize Some Stuff, Incase You Dont Like The Set Configs.
 [+] Added a Button in Your Backpack to Toggle VelNix Hub UI.
 [+] 2 New Tabs: "Utilities." And "Credits."
 [!] Massive Credits to Eniko For Streamlining Most Features.]]
})
local Former = Tabs.EnikoS:AddSection("VelNix - Credits")
Former:AddParagraph({
    Title = "[ Orealated ]",
    Content = [[ Former Owner - All Hubs I Made Suck.
 What I Do: I Design the GUIs and Decide on the UI and Descriptions. I Also Provide Ideas to Eniko or Create Them and Give Them to Him, Which He Then Tweaks it.]]
})
Former:AddParagraph({
    Title = "[ Eniko ]",
    Content = [[ Owner - Former Gave me Source!
 What I Do: I Wait Until the Owner Direct Messages Me and Tweak the Stuff He Gave Me.]]
})

local function clamp(value, min, max)
    return math.max(min, math.min(max, value))
end

task.spawn(function()
    local self = Nurysium_Util.getBall()
    if self then
        local ParryVisualizer = Instance.new("Part", workspace)
        ParryVisualizer.Color = Color3.fromRGB(128, 128, 128)
        ParryVisualizer.Material = Enum.Material.ForceField
        ParryVisualizer.Transparency = 0.5
        ParryVisualizer.Anchored = true
        ParryVisualizer.CanCollide = false
        ParryVisualizer.CastShadow = false
        ParryVisualizer.Shape = Enum.PartType.Ball
        ParryVisualizer.Size = Vector3.new(1, 1, 1)

        local SpamVisualizer = ParryVisualizer:Clone()
        SpamVisualizer.Parent = workspace
        SpamVisualizer.Color = Color3.fromRGB(255, 0, 0)

        local ParryHighlight = Instance.new("Highlight")
        ParryHighlight.Parent = ParryVisualizer
        ParryHighlight.Enabled = true
        ParryHighlight.FillTransparency = 0
        ParryHighlight.OutlineColor = Color3.fromRGB(255, 255, 255)

        local SpamHighlight = ParryHighlight:Clone()
        SpamHighlight.Parent = SpamVisualizer
        SpamHighlight.Enabled = true
        SpamHighlight.FillTransparency = 0
        SpamHighlight.OutlineColor = Color3.fromRGB(255, 255, 255)

        RunService.RenderStepped:Connect(function()
            if visualize_Enabled and self and local_player then
                local ping = Stats.Network.ServerStatsItem["Data Ping"]:GetValue() / 10
                local ball_Position = self.Position
                local player_Position = local_player.Character.PrimaryPart.Position
                local ball_Velocity = self:FindFirstChild("zoomies") and self.zoomies.VectorVelocity or self.AssemblyLinearVelocity
                local ball_Direction = (local_player.Character.PrimaryPart.Position - ball_Position).Unit
                local ball_Distance = (local_player.Character.PrimaryPart.Position - ball_Position).Magnitude
                local ball_Dot = ball_Direction:Dot(ball_Velocity.Unit)
                local ball_Speed = ball_Velocity.Magnitude

                local speedFactor = 3.25 - (ping / 150)
                local speedFactorPingBased = 5.5 - (ping / 100)
                local parry_Range = math.max(math.max(ping, 3.5) + ball_Speed / speedFactor, speedFactorPingBased)
                local spam_Range = math.clamp((math.max(ping / 8, 15) + ball_Speed / 5.5), 0, 60)

                local parry_Visualizer_Size = Vector3.new(parry_Range * 2, parry_Range * 2, parry_Range * 2)
                local spam_Visualizer_Size = Vector3.new(spam_Range * 2, spam_Range * 2, spam_Range * 2)

                ParryVisualizer.Transparency = 0
                ParryVisualizer.Material = Enum.Material.ForceField
                ParryVisualizer.Size = parry_Visualizer_Size
                ParryVisualizer.CFrame = CFrame.new(player_Position)

                SpamVisualizer.Transparency = 0
                SpamVisualizer.Material = Enum.Material.ForceField
                SpamVisualizer.Size = spam_Visualizer_Size
                SpamVisualizer.CFrame = CFrame.new(player_Position)
            else
                ParryVisualizer.Material = Enum.Material.ForceField
                ParryVisualizer.Transparency = 1
                SpamVisualizer.Material = Enum.Material.ForceField
                SpamVisualizer.Transparency = 1
            end
        end)
    end
end)

task.defer(function()
    RunService.Stepped:Connect(function()
        if auto_win and workspace.Alive:FindFirstChild(local_player.Name) then
            local self = Nurysium_Util.getBall()
            if not self then return end
            
            local player = local_player.Character
            local ball_Position = self.Position
            local ball_Distance = (player.HumanoidRootPart.Position - ball_Position).Magnitude
            
            local fixed_Distance = 23
            
            local angle = tick() * orbitSpeedSlider.Value
            local x = math.cos(angle) * fixed_Distance
            local y = math.sin(angle * 2) * 10
            local z = math.sin(angle) * fixed_Distance
            local offset = Vector3.new(x, y, z)
            local target_Position = ball_Position + offset

            local direction = (target_Position - player.HumanoidRootPart.Position).Unit
            local cframe = CFrame.new(target_Position, ball_Position)
            player.HumanoidRootPart.CFrame = cframe
        end
    end)
end)

task.defer(function()
    local runService = game:GetService("RunService")
    local Players = game:GetService("Players")
    local localPlayer = Players.LocalPlayer

    local function walkTo(position)
        local playerCharacter = localPlayer.Character
        if playerCharacter and playerCharacter:FindFirstChild("Humanoid") then
            playerCharacter.Humanoid:MoveTo(position)
        end
    end

    local function improvedAvoidWalls(startPos, targetPos)
        local direction = (targetPos - startPos).Unit
        local rayLength = 20
        local ray = Ray.new(startPos, direction * rayLength)
        local hit, hitPosition, normal = workspace:FindPartOnRayWithIgnoreList(ray, {localPlayer.Character})

        if hit then
            local reflectionDirection = direction - 2 * direction:Dot(normal) * normal
            return hitPosition + reflectionDirection * 5
        end

        return targetPos
    end

    runService.Heartbeat:Connect(function()
        if not ai_Enabled or not workspace.Alive:FindFirstChild(localPlayer.Name) then
            return
        end

        local self = Nurysium_Util.getBall()
        if not self or not closest_Entity then
            return
        end

        local hrp = closest_Entity:FindFirstChild('HumanoidRootPart')
        if not hrp then
            return
        end

        local tickNow = tick()
        local ballPosition = self.Position
        local ballDistance = localPlayer:DistanceFromCharacter(ballPosition)
        local playerPosition = localPlayer.Character.PrimaryPart.Position
        local targetPosition = hrp.Position
        local targetDistance = localPlayer:DistanceFromCharacter(targetPosition)
        local targetLookVector = hrp.CFrame.LookVector
        local resolvedPosition = Vector3.zero

        if aura_table.is_Spamming then
            resolvedPosition = targetPosition + (playerPosition - targetPosition).Unit * 8
        else
            if targetDistance > 10 then
                resolvedPosition = targetPosition + (playerPosition - targetPosition).Unit * 25
            else
                resolvedPosition = targetPosition - targetLookVector * (math.random(8.5, 13.5) + (ballDistance / math.random(8, 20)))
            end
        end

        if (playerPosition - targetPosition).Magnitude < 8 then
            resolvedPosition = targetPosition + (playerPosition - targetPosition).Unit * 35
        end

        if ballDistance < 8 then
            resolvedPosition = playerPosition + (playerPosition - ballPosition).Unit * 10
        end

        resolvedPosition = improvedAvoidWalls(playerPosition, resolvedPosition)

        walkTo(resolvedPosition)
    end)
end)

local teleportInterval = tonumber(teleportIntervalSlider.Value)
local lastTeleportTime = 0

task.defer(function()
    RunService.PreRender:Connect(function()
        local self = Nurysium_Util.getBall()
        if not self or not tp_hit then return end
        local player = local_player.Character
        local ball_Position = self.Position
        local player_Position = player.HumanoidRootPart.Position

        local currentTime = tick()
        if tp_hit and self:GetAttribute('target') == local_player.Name and workspace.Alive:FindFirstChild(local_player.Name) and (currentTime - lastTeleportTime) >= teleportInterval then
            local safe_Distance = 22
            local direction = (ball_Position - player_Position).Unit
            local target_Position = ball_Position - direction * safe_Distance

            player.HumanoidRootPart.CFrame = CFrame.new(target_Position)
            lastTeleportTime = currentTime
        end
    end)
end)

task.defer(function()
	RunService.RenderStepped:Connect(function()
		if spectate_Enabled then
			local self = Nurysium_Util.getBall()
			if not self then
				return
			end
			workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(CFrame.new(workspace.CurrentCamera.CFrame.Position, self.Position), 1.5)
		end
	end)
end)

task.defer(function()
	while task.wait(1.2) do
		if night_mode_Enabled then
			game:GetService("TweenService"):Create(game:GetService("Lighting"), TweenInfo.new(3), {ClockTime = 3.9}):Play()
		else
			game:GetService("TweenService"):Create(game:GetService("Lighting"), TweenInfo.new(3), {ClockTime = 13.5}):Play()
		end
	end
end)

local randomPosition = Vector3.new(
    math.random(-1000, 1000),
    math.random(0, 1000),
    math.random(100, 1000)
)

local function Parry(targetPosition)
    task.spawn(function()
        local cameraPosition = camera.CFrame.Position
        local direction = auto_curve and randomPosition or (cameraPosition + camera.CFrame.LookVector)

        originalParryRemote:FireServer(0, CFrame.new(cameraPosition, direction), {[closest_Entity.Name] = targetPosition}, {targetPosition.X, targetPosition.Y}, false)
    end)
end

task.spawn(function()
    RunService.Heartbeat:Connect(function()
        aura_table.Takentime = tick() - aura_table.hit_Time
    end)
end)

coroutine.wrap(function()
    local lastSpamTime = 0
    local spamInterval = task.wait()

    local function autoSpam()
        if not auto_spam or not workspace.Alive:FindFirstChild(local_player.Name) then
            aura_table.hit_Count = 0
            aura_table.is_Spamming = false
            aura_table.last_target = nil
            return
        end

        if closest_Entity and workspace.Alive:FindFirstChild(closest_Entity.Name) then
            local playerPosition = local_player.Character.PrimaryPart.Position
            local targetPosition = closest_Entity.HumanoidRootPart.Position
            local distance = (playerPosition - targetPosition).Magnitude

            local ball = Nurysium_Util.getBall()
            if distance <= aura_table.spam_Range and ball and ball:GetAttribute('target') == local_player.Name then
                local currentTime = tick()
                if currentTime - lastSpamTime >= spamInterval then
                    lastSpamTime = currentTime
                    task.spawn(function()
                        Parry(targetPosition)
                    end)
                else
                    aura_table.is_Spamming = false
                end
            end
        end
    end

    task.spawn(function()
        while true do
            autoSpam()
            task.wait()
        end
    end)

    task.spawn(function()
        while true do
            if not auto_spam or not workspace.Alive:FindFirstChild(local_player.Name) then
                aura_table.hit_Count = 0
                aura_table.is_Spamming = false
                aura_table.last_target = nil
            end
            task.wait()
        end
    end)

    task.spawn(function()
        while true do
            if closest_Entity and workspace.Alive:FindFirstChild(closest_Entity.Name) then
                if aura_table.is_Spamming and aura_table.hit_Count >= 1 then
                    local playerPosition = local_player.Character.PrimaryPart.Position
                    local targetPosition = closest_Entity.HumanoidRootPart.Position
                    local distance = (playerPosition - targetPosition).Magnitude

                    if distance <= aura_table.spam_Range then
                        local currentTime = tick()
                        if currentTime - lastSpamTime >= spamInterval then
                            lastSpamTime = currentTime
                            task.spawn(function()
                                Parry(targetPosition)
                            end)
                        end
                    end
                end
            end
            task.wait()
        end
    end)
end)()

coroutine.wrap(function()
    RunService.Stepped:Connect(function()
        local playerDead = workspace.Dead:FindFirstChild(local_player.Name)

        if not aura_Enabled or playerDead then
            task.spawn(resetAuraTable)
            return
        end

        local ping = Stats.Network.ServerStatsItem["Data Ping"]:GetValue() / 10
        local ballEntity = Nurysium_Util.getBall()

        if not ballEntity then
            task.spawn(resetAuraTable)
            return
        end

        task.spawn(function()
            ballEntity:GetAttributeChangedSignal("target"):Once(function()
                aura_table.canParry = true
            end)
        end)

        task.spawn(function()
            ballEntity:GetAttributeChangedSignal('from'):Once(function()
                aura_table.last_target = workspace.Alive:FindFirstChild(ballEntity:GetAttribute('from'))
            end)
        end)

        task.spawn(get_closest_entity, local_player.Character.PrimaryPart)

        local player_Position = local_player.Character.PrimaryPart.Position
        local ball_Position = ballEntity.Position
        local ball_Velocity = ballEntity.AssemblyLinearVelocity

        if ballEntity:FindFirstChild("zoomies") then
            ball_Velocity = ballEntity.zoomies.VectorVelocity
        end

        local ball_Direction = (player_Position - ball_Position).Unit
        local ball_Distance = (player_Position - ball_Position).Magnitude
        local ball_Dot = ball_Direction:Dot(ball_Velocity.Unit)
        local ball_Speed = ball_Velocity.Magnitude

        if ball_Speed < 10 then
            task.spawn(resetAuraTable)
        end

        local player_Velocity = local_player.Character.HumanoidRootPart.AssemblyLinearVelocity
        local player_isMoving = player_Velocity.Magnitude > 0

        local ball_speed_Limited = math.clamp(ball_Speed / 1000, 0, 0.1)
        local ball_predicted_Distance = (ball_Distance - ping / 15.5) - (ball_Speed / 3.5)
        local target_Position = closest_Entity.HumanoidRootPart.Position
        local target_Distance = local_player:DistanceFromCharacter(target_Position)
        local closest_target_Distance = local_player:DistanceFromCharacter(closest_Entity.HumanoidRootPart.Position)
        local target_distance_Limited = math.clamp(target_Distance / 10000, 0, 0.1)
        local target_Direction = (player_Position - closest_Entity.HumanoidRootPart.Position).Unit
        local target_Velocity = closest_Entity.HumanoidRootPart.AssemblyLinearVelocity
        local target_isMoving = target_Velocity.Magnitude > 0
        local target_Dot = target_isMoving and math.max(target_Direction:Dot(target_Velocity.Unit), 0)

        local speedFactor = 3.25 - (ping / 150)
        local speedFactorPingBased = 5.5 - (ping / 100)
        aura_table.parry_Range = math.max(math.max(ping, 3.5) + ball_Speed / speedFactor, speedFactorPingBased)

        aura_table.spam_Range = math.clamp((math.max(ping / 8, 15) + ball_Speed / 5.5), 0, 60)

        pcall(function()
            local velocity_angle = math.abs(math.acos(ball_Direction:Dot(ball_Velocity.Unit)))
            aura_table.is_Spamming = aura_table.hit_Count > 1 or (target_Distance <= aura_table.spam_Range and ball_Distance < 10 and ball_Speed > 10) and ball_Velocity.Y > -50 and velocity_angle < 0.2
        end)

        if ball_Dot < -0.2 then
            aura_table.ball_Warping = tick()
        end

        task.spawn(function()
            if (tick() - aura_table.ball_Warping) >= 0.15 + target_distance_Limited - ball_speed_Limited or ball_Distance <= 10 then
                aura_table.is_ball_Warping = false
                return
            end

            if aura_table.last_target then
                if (ball_Position - aura_table.last_target.HumanoidRootPart.Position).Magnitude > 35.5 or target_Distance <= 12 then
                    aura_table.is_ball_Warping = false
                end
            end

            if ball_Dot < -0.2 or ball_Speed < 25 then
                aura_table.is_ball_Warping = true
            else
                aura_table.is_ball_Warping = false
            end
        end)

        if ballEntity:GetAttribute('target') ~= local_player.Name or not aura_table.canParry then
            return
        end

        if ballEntity:GetAttribute('target') == local_player.Name and ball_Distance <= aura_table.parry_Range and not aura_table.is_ball_Warping and ball_Speed > 0 and ball_Dot > 0.1 and aura_table.canParry then
            task.spawn(Parry, target_Position)
            aura_table.hit_Count = aura_table.hit_Count + 1
            task.delay(0.55 + (ping / 100), function()
                aura_table.hit_Count = math.max(0, aura_table.hit_Count - 1)
            end)
            aura_table.hit_Time = tick()
            aura_table.canParry = false
        end

        task.spawn(function()
            repeat
                RunService.PreRender:Wait()
            until (tick() - aura_table.hit_Time) >= 1
            aura_table.canParry = true
        end)
    end)

    function resetAuraTable()
        aura_table.hit_Time = tick() * 10
        aura_table.hit_Count = 0
        aura_table.is_ball_Warping = false
        aura_table.is_Spamming = false
        aura_table.canParry = true
        aura_table.last_target = nil
    end

    initializate("nurysium_temp")
end)()